#!/bin/bash
# Ensure the script is run using sudo
if [ "$(id -u)" -ne 0 ]; then
    echo "Error: This script must be run with sudo."
    exit 1
fi

# Prompt for the Central Logging Server IP address
read -p "Enter the Central Logging Server IP: " LOGGING_SERVER_IP

# Create directory for public keys if needed
mkdir -p /home/logging/.ssh/pub_keys
chown logging:logging /home/logging/.ssh/pub_keys
chmod 700 /home/logging/.ssh/pub_keys

# Download the two public key files for external-kali
curl http://$LOGGING_SERVER_IP:8000/key_external-kali_1.pub -o /home/logging/.ssh/pub_keys/key_external-kali_1.pub
curl http://$LOGGING_SERVER_IP:8000/key_external-kali_2.pub -o /home/logging/.ssh/pub_keys/key_external-kali_2.pub
curl http://$LOGGING_SERVER_IP:8000/scripts.tar.gz -o /home/logging/scripts.tar.gz
chown logging:logging /home/logging/.ssh/pub_keys/key_external-kali_1.pub /home/logging/.ssh/pub_keys/key_external-kali_2.pub
chmod 600 /home/logging/.ssh/pub_keys/key_external-kali_1.pub /home/logging/.ssh/pub_keys/key_external-kali_2.pub

echo "Downloaded public keys for external-kali."

rm -f /home/logging/.ssh/authorized_keys

# Ensure authorized_keys exists and update it with downloaded keys
mkdir -p /home/logging/.ssh
touch /home/logging/.ssh/authorized_keys
chown logging:logging /home/logging/.ssh /home/logging/.ssh/authorized_keys
chmod 700 /home/logging/.ssh
chmod 600 /home/logging/.ssh/authorized_keys

for key in /home/logging/.ssh/pub_keys/*.pub; do
    if ! grep -q -F -x -f "$key" /home/logging/.ssh/authorized_keys; then
         cat "$key" >> /home/logging/.ssh/authorized_keys
    fi
done

echo "Updated /home/logging/.ssh/authorized_keys with downloaded keys."

# Restart SSH service
echo "Restarting sshd service..."
if command -v systemctl >/dev/null; then
    systemctl restart sshd && echo "sshd restarted successfully."
else
    service ssh restart && echo "sshd restarted successfully."
fi

# Firewall Setup and Security Scripts

## Firewall Setup Script (`firewall.sh`)
**Purpose:** Sets up a basic firewall on Linux servers to protect against unauthorized access by allowing only essential services like SSH, HTTP, and HTTPS.

### Important:
- This script is for Linux servers only (e.g., Web, Database, DNS, FTP servers).
- **Do not** run this script on the MikroTik router.

### Services Allowed (by default):
- **SSH** (port 22)
- **HTTP** (port 80)
- **HTTPS** (port 443)

### Execution Instructions:
```bash
chmod +x firewall.sh
sudo ./firewall.sh
```

### After Execution:
- Firewall (`ufw`) will be enabled.
- Default rules applied (deny all incoming, allow essential services).
- Verify rules using:
```bash
sudo ufw status verbose
```

---
## DNS Server Script (`dns_setup.sh`)
**Purpose:** Installs and securely configures a DNS server (BIND9). This script should only be run on the **DNS Server** (e.g., `192.168.t.8`).

### What it Does:
- Installs BIND9 DNS server software.
- Restricts DNS queries to the internal network (`192.168.0.0/24`).
- Disables DNS recursion and zone transfers for security.

### Execution Instructions:
```bash
chmod +x dns_setup.sh
sudo ./dns_setup.sh
```

### After Execution:
- Your DNS service is securely running and protected against external queries.

---
## Apache SSL Setup Script (`apache_ssl.sh`)
**Purpose:** Installs Apache, enables SSL, and generates a Certificate Signing Request (CSR) for an official SSL certificate.

### When and Where to Use:
- Only use on the **Web Server** (e.g., `192.168.t.5`).
- Run **once** at competition start before scoring checks.

### Execution Instructions:
```bash
chmod +x apache_ssl.sh
sudo ./apache_ssl.sh
```

### After Execution:
- Apache installed with SSL enabled.
- CSR (`team.csr`) generatedâ€”upload to CA server.
- Manually configure SSL once the certificate (`team.crt`) is received.

---
## FTP Server Setup Script (`ftp_setup.sh`)
**Purpose:** Installs and securely configures an FTP server (`vsftpd`), disabling anonymous access and restricting users securely.

### When and Where to Use:
- Run **only** on a dedicated **FTP server**.
- Execute **once** after initial setup.

### Execution Instructions:
```bash
chmod +x ftp_setup.sh
sudo ./ftp_setup.sh
```

### Security Configurations Applied:
- **Anonymous FTP login disabled** (`anonymous_enable=NO`).
- **Secure local-user login enabled** with write permissions.
- **User restrictions enforced** (`chroot_local_user=YES`).

---
## Cowrie Honeypot Setup Script (`cowrie_honeypot.sh`)
**Purpose:** Deploys a honeypot to attract and log malicious activity, imitating an SSH server.

### When and Where to Use:
- **Run only** on an **isolated honeypot server** (e.g., `172.18.13.100`).
- Execute **before** opening external firewall rules.

### Execution Instructions:
```bash
chmod +x cowrie_honeypot.sh
sudo ./cowrie_honeypot.sh
```

### What this script does:
- Installs required dependencies.
- Clones Cowrie repository.
- Sets up a virtual environment and installs dependencies.
- Starts the Cowrie honeypot service.

### Post-installation Checks:
- Verify that the honeypot is running:
```bash
pgrep -f "twistd -n cowrie"
```
- Check logs:
```bash
cat ~/cowrie/var/log/cowrie/cowrie.log
```
- Manage Cowrie manually:
```bash
cd ~/cowrie
sudo bin/cowrie restart
```

### MikroTik Router Firewall Rules to Redirect Attackers:
```bash
/ip firewall nat add chain=dstnat protocol=tcp dst-port=22 action=dst-nat to-addresses=172.18.13.100
```

### Important Security Note:
- **Do NOT** run this on production servers.
- **Ensure** the honeypot is isolated from the real network.

---
## MySQL Secure Setup Script (`mysql_secure.sh`)
**Purpose:** Securely installs and configures MySQL, removing insecure defaults and hardening security settings.

### When and Where to Use:
- **Run only** on a dedicated **MySQL Database Server** (e.g., `192.168.t.12`).
- Execute **immediately** after setup.

### Execution Instructions:
```bash
chmod +x mysql_secure.sh
sudo ./mysql_secure.sh
```

### What this script does:
- Installs MySQL server.
- Runs `mysql_secure_installation` to:
  - Set a **strong root password**.
  - Remove **anonymous users**.
  - Disable **remote root logins**.
  - Delete **default/test databases**.
  - Reload MySQL privileges.

### After Execution Checklist:
- **MySQL installed and running**.
- **Root password set securely**.
- **Remote root access disabled**.
- **Anonymous users removed**.
- **Test databases deleted**.

### Check MySQL Status:
```bash
sudo systemctl status mysql
```

### Login to MySQL:
```bash
sudo mysql -u root -p
```

### Troubleshooting:
- Forgot MySQL root password? Reset with:
```bash
sudo mysqladmin -u root password "YourNewSecurePassword"
```
- **Remote root login is disabled** for security purposes. Use SSH or local access.

---

